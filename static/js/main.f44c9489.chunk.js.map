{"version":3,"sources":["Components/AddDot/index.js","Components/CanvasScreen/index.js","Components/Boundary/index.js","App.js","reportWebVitals.js","index.js"],"names":["AddDot","minBoundary","maxBoundary","onSubmit","useState","dotColor","setdotColor","dotSize","setdotSize","dotPosition","setdotPosition","error","setError","clearInput","className","Form","e","preventDefault","flag","length","color","size","position","Group","controlId","Control","value","as","onChange","target","disabled","min","type","placeholder","max","Button","variant","CanvasScreen","boundary","dots","lengthPercent","Math","abs","canvasRef","useRef","drawLine","canvasObj","current","canvasContext","getContext","clearRect","width","height","beginPath","moveTo","lineTo","stroke","console","log","drawDots","lineWidth","forEach","dot","dotDistanceFromLeftBoundary","distancePercentage","positionOnLine","arc","PI","fillStyle","fill","clearCanvas","useEffect","window","innerWidth","ref","Boundary","boundaryInput","setboundaryInput","handleChanges","index","bi","parseInt","App","setboundary","setDots","Container","Row","Col","md","onClick","new_dot","dotsArray","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f44c9489.chunk.js","sourcesContent":["import React, {useState}  from 'react'\r\nimport { Button, Form } from 'react-bootstrap'\r\n\r\nexport default function AddDot({minBoundary, maxBoundary, onSubmit}) {\r\n    const [dotColor, setdotColor] = useState(\"\")\r\n    const [dotSize, setdotSize] = useState(1)\r\n    const [dotPosition, setdotPosition] = useState(0)\r\n    const [error, setError] = useState(\"\")\r\n\r\n    const handleCreateDot = (e) => {\r\n        e.preventDefault()\r\n        let flag = true\r\n        if(dotSize < 0 || dotSize > 10){\r\n            setError(\"Dot size must be 1-10\")\r\n            flag = false\r\n        } else if(dotPosition < minBoundary || dotPosition > maxBoundary){\r\n            setError(`Dot size must be ${minBoundary +\" - \"+ maxBoundary}`)\r\n            flag = false\r\n        } else if(dotColor.length === 0) {\r\n            setError(\"Please select dot color!\")\r\n            flag = false\r\n        } else{\r\n            setError(\"\")\r\n        }\r\n        if(flag){\r\n            onSubmit({\r\n                color: dotColor,\r\n                size: dotSize,\r\n                position: dotPosition\r\n            })\r\n            clearInput()\r\n        }\r\n    }\r\n\r\n    const clearInput = () => {\r\n        setdotColor(\"\")\r\n        setdotSize(1)\r\n        setdotPosition(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-dot\">\r\n            <Form onSubmit={handleCreateDot}>\r\n                {\r\n                    error != null && <small className='text-danger'>{error}</small>\r\n                }\r\n                <Form.Group controlId=\"formSelectDotColor\">\r\n                    <Form.Control value={dotColor} as=\"select\" onChange={(e) => {setdotColor(e.target.value)}}>\r\n                        <option value=\"\" disabled>--- Select Color ---</option>\r\n                        <option value=\"green\">Green</option>\r\n                        <option value=\"red\">Red</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formSelectDotSize\">\r\n                    <small>Size</small>\r\n                    <Form.Control min=\"1\" value={dotSize} type=\"number\" placeholder=\"Size\" onChange={(e) => {setdotSize(e.target.value)}} />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formSelectDotPosition\">\r\n                    <small>Position</small>\r\n                    <Form.Control min={minBoundary} max={maxBoundary} value={dotPosition} type=\"number\" placeholder=\"Position\" onChange={(e) => {setdotPosition(e.target.value)}}/>\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Create Dot\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef, useEffect} from 'react'\r\n\r\nexport default function CanvasScreen({boundary, dots}) {\r\n    let total_line_length = Math.abs(boundary[0]) + Math.abs(boundary[1]);\r\n    let lengthPercent = 100 / total_line_length;\r\n    const canvasRef = useRef(null)\r\n\r\n    const drawLine = () => {\r\n        const canvasObj = canvasRef.current\r\n        const canvasContext = canvasObj.getContext(\"2d\");\r\n        canvasContext.clearRect(0, 0, canvasObj.width, canvasObj.height);\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(10, canvasObj.height/2);\r\n        canvasContext.lineTo(canvasObj.width-10, canvasObj.height/2);\r\n        canvasContext.stroke();\r\n        console.log(\"test\");\r\n    }\r\n\r\n    const drawDots = () => {\r\n        const canvasObj = canvasRef.current\r\n        const canvasContext = canvasObj.getContext(\"2d\");\r\n        let paddingSize = 10;\r\n        let lineWidth = canvasObj.width-20;\r\n        console.log(\"test2\");\r\n        \r\n        if(dots.length){\r\n            dots.forEach(dot => {\r\n                let dotDistanceFromLeftBoundary =  Math.abs(boundary[0] - dot.position)\r\n                let distancePercentage = dotDistanceFromLeftBoundary * lengthPercent\r\n                let positionOnLine = (lineWidth * distancePercentage) / 100\r\n                console.log(\"dot -->\", dotDistanceFromLeftBoundary, distancePercentage , positionOnLine, lineWidth)\r\n                canvasContext.beginPath();\r\n                canvasContext.arc(positionOnLine+paddingSize, canvasObj.height/2, dot.size * 5, 0, 2 * Math.PI);\r\n                canvasContext.fillStyle = dot.color == \"green\" ? \"#28a745ad\" : \"#dc35459c\";\r\n                canvasContext.fill();\r\n            });\r\n        } else {\r\n            clearCanvas()\r\n        }\r\n    }\r\n\r\n    const clearCanvas = () => {\r\n        drawLine()\r\n    }\r\n\r\n    useEffect(() => {\r\n        drawLine()\r\n    },[])\r\n    \r\n    useEffect(() => {\r\n        drawDots()\r\n    },[drawDots])\r\n    return (\r\n        <div>\r\n            <canvas \r\n                className=\"canvas-app\"\r\n                width={window.innerWidth*0.6} height=\"200\"\r\n                ref={canvasRef}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState}  from 'react'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nexport default function Boundary({boundary, onChange}) {\r\n    const [boundaryInput, setboundaryInput] = useState(boundary)\r\n    const handleChanges = (index, value) => {\r\n        let bi = [...boundaryInput]\r\n        bi[index] = parseInt(value)\r\n        setboundaryInput(bi)\r\n        onChange(bi)\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-dot h-100\">\r\n            <b>Boundary</b>\r\n            <Form.Group controlId=\"boundaryMin\">\r\n                <small>Min</small>\r\n                <Form.Control max=\"-1\" value={boundaryInput[0]} type=\"number\" placeholder=\"Minimum\" onChange={(e) => {handleChanges(0, e.target.value)}} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"boundaryMax\">\r\n                <small>Max</small>\r\n                <Form.Control min=\"1\" value={boundaryInput[1]} type=\"number\" placeholder=\"Maximum\" onChange={(e) => {handleChanges(1, e.target.value)}}/>\r\n            </Form.Group>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport {useState} from 'react';\n//components\nimport AddDot from './Components/AddDot';\nimport CanvasScreen from './Components/CanvasScreen';\nimport Boundary from './Components/Boundary';\n\n\nfunction App() {\n  const [boundary, setboundary] = useState([-100,100])\n  const [dots, setDots] = useState([])\n\n  const handleOnSubmit = (new_dot) => {\n    let dotsArray = [...dots];\n    dotsArray.push(new_dot);\n    setDots(dotsArray);\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <Row>\n        <Col md={12} className=\"mb-2\">\n          <CanvasScreen boundary={boundary} dots={dots} />\n          <Button variant=\"danger\" onClick={ () => {setDots([])}}>Clear Canvas</Button>\n        </Col>\n        <Col md={12}>\n          <Row>\n            <Col md={4}>\n              <Boundary boundary={boundary} onChange={setboundary}/>\n            </Col>\n            <Col md={4}>\n              <AddDot minBoundary={boundary[0]} maxBoundary={boundary[1]} onSubmit={handleOnSubmit}/>\n            </Col> \n          </Row>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}